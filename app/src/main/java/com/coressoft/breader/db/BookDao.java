package com.coressoft.breader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.coressoft.breader.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Void> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Abbr = new Property(2, String.class, "abbr", false, "abbr");
        public final static Property NameEn = new Property(3, String.class, "nameEn", false, "nameEn");
        public final static Property AbbrEn = new Property(4, String.class, "abbrEn", false, "abbrEn");
        public final static Property BookChapterCount = new Property(5, int.class, "bookChapterCount", false, "bookChapterCount");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"id\" INTEGER NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"abbr\" TEXT," + // 2: abbr
                "\"nameEn\" TEXT," + // 3: nameEn
                "\"abbrEn\" TEXT," + // 4: abbrEn
                "\"bookChapterCount\" INTEGER NOT NULL );"); // 5: bookChapterCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String abbr = entity.getAbbr();
        if (abbr != null) {
            stmt.bindString(3, abbr);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(4, nameEn);
        }
 
        String abbrEn = entity.getAbbrEn();
        if (abbrEn != null) {
            stmt.bindString(5, abbrEn);
        }
        stmt.bindLong(6, entity.getBookChapterCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String abbr = entity.getAbbr();
        if (abbr != null) {
            stmt.bindString(3, abbr);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(4, nameEn);
        }
 
        String abbrEn = entity.getAbbrEn();
        if (abbrEn != null) {
            stmt.bindString(5, abbrEn);
        }
        stmt.bindLong(6, entity.getBookChapterCount());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // abbr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameEn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // abbrEn
            cursor.getInt(offset + 5) // bookChapterCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAbbr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNameEn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAbbrEn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookChapterCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Book entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Book entity) {
        return null;
    }

    @Override
    public boolean hasKey(Book entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
